{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tweetId","tweetStrId","handleNegative","bind","assertThisInitialized","handleNeutral","handlePositive","handleNA","getTweetId","annotStatus","callback","myUrl","axios","put","$set","annotation","then","response","console","log","catch","error","updateTweet","e","_this2","get","data","retreivedStrId","id_str","String","setState","_id","react_default","a","createElement","className","dist","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAkGeA,6BA3Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,QAAS,KAAKC,WAAW,MAEvCT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IACtBA,EAAKa,cAAgBb,EAAKa,cAAcF,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IACrBA,EAAKc,eAAiBd,EAAKc,eAAeH,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IACtBA,EAAKe,SAAWf,EAAKe,SAASJ,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IAChBA,EAAKgB,WAAahB,EAAKgB,WAAWL,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IARDA,oFAWjBG,KAAKa,iDAGKC,EAAYC,GAEtB,IAAIC,EAAQ,kIAAkIhB,KAAKI,MAAME,WAAa,KAEtKW,IAAMC,IAAIF,EACR,CAAEG,KAAO,CAAEC,WAAaN,KACvBO,KAAK,SAAUC,GACdC,QAAQC,IAAI,YACZD,QAAQC,IAAIF,GACZP,MAEDU,MAAM,SAAUC,GACfH,QAAQC,IAAIE,wCAMhBH,QAAQC,IAAIxB,KAAKI,MAAMC,QAAS,UAGhCL,KAAK2B,YAAY,EAAE3B,KAAKa,mDAIXe,GACbL,QAAQC,IAAI,YACZxB,KAAK2B,aAAa,EAAE3B,KAAKa,kDAEbe,GACZL,QAAQC,IAAI,WACZxB,KAAK2B,YAAY,EAAE3B,KAAKa,mDAEXe,GACbL,QAAQC,IAAI,YACZxB,KAAK2B,YAAY,EAAE3B,KAAKa,iDAEd,IAAAgB,EAAA7B,KACVuB,QAAQC,IAAI,uBAGZP,IAAMa,IAFM,oKAGXT,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASS,MACrB,IAAIC,EAAiBV,EAASS,KAAK,GAAGE,OAEtCV,QAAQC,IAAI,SAASU,OAAOF,IAC5BH,EAAKM,SAAS,CAAC7B,WAAW4B,OAAOF,GAAgB3B,QAAQiB,EAASS,KAAK,GAAGK,yCAK5E,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,sBADF,IACoBvC,KAAKI,MAAME,YAE/B+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACE,EAAA,MAAD,CAAOpC,QAASL,KAAKI,MAAME,cAE7B+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEfH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,yBAAyBG,QAAS3C,KAAKO,gBAAvE,YACA8B,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,yBAAyBG,QAAS3C,KAAKU,eAAvE,UACA2B,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,yBAAyBG,QAAS3C,KAAKW,gBAAvE,aAEA0B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,yBAAyBG,QAAS3C,KAAKY,UAAvE,oCApFUgC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.b814e94c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Tweet } from 'react-twitter-widgets';\nimport axios from 'axios';\nimport qs from 'qs';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {tweetId: null,tweetStrId:null};\n\n    this.handleNegative = this.handleNegative.bind(this);\n    this.handleNeutral = this.handleNeutral.bind(this);\n    this.handlePositive = this.handlePositive.bind(this);\n    this.handleNA = this.handleNA.bind(this); \n    this.getTweetId = this.getTweetId.bind(this);\n  }\n  componentWillMount(){\n    this.getTweetId();\n  }\n\n  updateTweet(annotStatus,callback){\n\n    let myUrl = 'https://api.mlab.com/api/1/databases/big_data_twitter/collections/tweets2?apiKey=1EnhaMU6f8Ay6RRAe_zZKzMa5F0b9ZU9&q={\"id_str\":\"'+this.state.tweetStrId + '\"}';\n    // let myUrl = 'https://api.mlab.com/api/1/databases/big_data_twitter/collections/tweets2/1111258998941061100?apiKey=1EnhaMU6f8Ay6RRAe_zZKzMa5F0b9ZU9';\n    axios.put(myUrl, \n      { $set : { annotation : annotStatus } } )\n      .then(function (response) {\n        console.log('success!');\n        console.log(response);\n        callback();\n      })\n      .catch(function (error) {\n        console.log(error);\n        });\n    \n\n  }\n  handleNA(){\n    console.log(this.state.tweetId, 'is NA.')\n    // let myurl = 'https://api.mlab.com/api/1/databases/big_data_twitter/collections/tweets2?q={%22annotation%22:{%22$exists%22:false}}&l=1&f={%22_id%22:1}&apiKey=1EnhaMU6f8Ay6RRAe_zZKzMa5F0b9ZU9'\n\n    this.updateTweet(2,this.getTweetId);\n        \n\n  }\n  handleNegative(e){\n    console.log('negative');\n    this.updateTweet(-1,this.getTweetId);\n  }\n  handleNeutral(e){\n    console.log('neutral');\n    this.updateTweet(0,this.getTweetId);\n  }\n  handlePositive(e){\n    console.log('positive');\n    this.updateTweet(1,this.getTweetId);\n  }\n  getTweetId(){\n    console.log('getting tweet id...')\n    let myurl = 'https://api.mlab.com/api/1/databases/big_data_twitter/collections/tweets2?q={%22annotation%22:{%22$exists%22:false}}&l=1&apiKey=1EnhaMU6f8Ay6RRAe_zZKzMa5F0b9ZU9'\n    \n    axios.get(myurl)\n    .then(response => {\n      console.log(response.data);\n      let retreivedStrId = response.data[0].id_str;\n      \n      console.log('got id',String(retreivedStrId));\n      this.setState({tweetStrId:String(retreivedStrId),tweetId:response.data[0]._id});\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n      <p>\n        <b>Tweet id:</b> {this.state.tweetStrId}\n      </p>\n      <div className=\"d-flex justify-content-center\">\n        <Tweet tweetId={this.state.tweetStrId}/>\n      </div>\n      <div className=\"buttons\">\n\n      <button type='button' className=\"btn btn-danger   boton\" onClick={this.handleNegative}>Negativo</button>\n      <button type='button' className=\"btn btn-dark     boton\" onClick={this.handleNeutral}>Neutro</button>\n      <button type='button' className=\"btn btn-success  boton\" onClick={this.handlePositive}>Positivo</button>\n      </div>\n      <br/>\n      <div>\n\n        <button type='button' className=\"btn btn-warning  boton\" onClick={this.handleNA}>No veo nada / No aplica</button>\n        </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}